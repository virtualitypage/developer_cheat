#!/bin/bash

current_dir=$(cd "$(dirname "$0")" && pwd)

touch shell.sh
chmod 755 shell.sh

cat << EOF > shell.sh
#!/bin/bash

・基本コマンド

cd  指定したディレクトリへ移動する

ls  対象ディレクトリの情報を表示する

pwd  現在アクセスしているディレクトリを表示する

mkdir  新しいフォルダを作成
　 　　  -p フォルダと共に親ディレクトリを作成する
　   　　-m フォルダ作成時にパーミッション設定も行う
　   　　-v フォルダ作成の経過を表示する

cp  対象のファイルをコピー
  -b 上書きするファイルのバックアップを作成する
  -f 対象ファイルを強制的に上書きする
  -i 対象ファイルの上書きをする前に確認メッセージを表示する
  -n コピー先にファイルが存在している場合に上書きするかどうかを指定する
  -S バックアップファイルを作成する際、所定の文字を末尾に追加する
  -v ファイルコピーで実行した内容を表示する

touch  ファイルを新規作成、またはタイムスタンプを変更する
      -a 対象ファイルに最後にアクセスした日時を書き換える
      -c 指定したファイル名のファイルが存在しなくても新規作成を行わないように指定する
      -d 文字列による指定で、タイムスタンプを書き換える
      -h シンボリックに設定されたタイムスタンプを書き換える
      -m 対象ファイルを最後に更新した日時を書き換える
      -r 指定したファイルと同じタイムスタンプに書き換える
      -t 指定した日時へタイムスタンプを書き換える

rmdir  中身にデータが入っていないフォルダを削除する

rm  指定したファイルを削除する
    -d 空のディレクトリを削除する
    -f 削除対象のファイルが存在しない場合に警告メッセージを表示せずに削除する
    -i ファイルを削除する前に確認メッセージを表示する
    -r ディレクトリを指定した場合に、中身のデータまで削除する
    -v 削除行う際の詳細情報を表示する

mkdir  ディレクトリを新規作成する
      -p 親ディレクトリも共に作成する
      -m パーミッションの設定も行う
      -v ディレクトリ作成の詳細情報を表示する

mv  ファイルの移動や名称変更などを行う
    -b バックアップを作成した上で、ファイルの上書きや削除を行う
    -f 警告メッセージを表示せずにファイルを上書きする
    -I 警告メッセージを表示した上でファイルを上書きする
    -n すでに同名のファイルやディレクトリがある場合はファイルの移動を行わないように指定する
    -v ファイル移動の詳細情報を表示する

clear  端末の画面に表示された内容を消去し、綺麗な状態にする

cat  テキストファイルの内容を表示する
    -A 非表示の文字まで全て表示する
    -b 空白の行以外に行番号を表示する
    -e TAB以外の全ての非表示文字を表示する
    -E テキストの行末部分に$ を追加して表示する
    -n 全ての行に行番号を表示する
    -s 空白の行を1行にまとめて表示する
    -t テキストに含まれる非表示文字を表示する
    -v TABと改行、改ページ以外の非表示文字を表示する

chmod  指定したファイルやフォルダの権限を変更する
      -c コマンドを実行し、内容に変更があった場合にその結果を表示する
      -f 権限変更に失敗した場合のエラーメッセージを表示させないように指定する
      -R フォルダ内の複数の対象データについて権限の変更を行う
      -v 権限変更の詳細情報を表示する

chown  指定したファイルやフォルダの所有者情報を変更する
      -r ディレクトリにデータが含まれる場合、まとめて所有者を変更する

tar  複数ファイルを圧縮して一つにまとめる、または圧縮されたファイルの展開を行う
    -A アーカイブにtarアーカイブの情報を追加する
    -c 新たにアーカイブを作成する
    -d ファイルシステムとアーカイブの内容を比較する
    -r アーカイブの末尾に対象ファイルを追加する
    -t アーカイブの一覧で表示する
    -u アーカイブに含まれるファイルを更新する
    -x アーカイブに含まれるファイルを取り出す

find  対象ファイルを検索する
      -amin 指定した時間（分単位）以前にアクセスされたファイルを検索する
      -anewer 指定したファイルへの最終アクセス日時より後にアクセスされたファイルを検索する
      -atime 指定した日付以前にアクセスされたファイルを検索する
      -H シンボリックリンクを指定して検索を行う
      -L 全てのシンボリックリンクを対象に検索を行う
      -mmin 指定した時間（分）以前に更新されたファイルを検索する
      -mtime 指定した日付以前に更新されたファイルを検索する
      -name ファイル名を指定して検索する
      -newer 指定したファイルが最後に更新された後に更新されたファイルを検索する
      -P シンボリックリンクを対象に検索を行う
      -path パスを指定して検索を行う
      -size サイズを指定して検索を行う
      -type ファイルタイプを指定して検索を行う

locate	ファイル名やディレクトリ名を指定してファイルを検索する

history  これまでに実行したコマンドの履歴を表示する

ln  ファイルやフォルダに対してリンクを作成する
　　 -s シンボリックリンクを作成する

man  コマンドの使い方に関するマニュアルを表示する
    -k キーワードを指定してマニュアルの内容を検索する

apropos  キーワードを指定してコマンドを検索する
        -C 所定の設定ファイルを対象に検索を行う
        -d デバッグに関する情報を表示する
        -l 結果を折り返して表示する
        -L 検索時に使用する言語を指定する
        -M manファイル上の検索パスを用いて検索を行う
        -r 検索時のキーワードに正規表現を使用する
        -s 所定の番号の章を対象に検索を行う
        -v 詳しい警告メッセージを表示する
        -w 検索時にワイルドカードを使用する

・変数

echo $VAR1  変数 VAR1 の値を表示する
echo ${VAR}1  変数 VAR の値と「1」を表示
echo ${VAR2}${VAR3}  変数 VAR2の値と変数 VAR3 の値を表示

VAR="$VAR1"  変数の値を他の変数へ設定する

・関数

function 関数名() {
  処理
  return 値
}

・if文

if 条件式 [ 1 -ge 2 ]
  then
    実行文1 echo ""
  else
    実行文2 echo ""
fi

・case文

case 条件式 in
  値1)
    実行文1
    ;;
  値2)
    実行文2
    ;;
esac

・for文

for 変数名 in 変数に代入する値のリスト
do
  実行文
done

・while文

while 条件文
do
  実行文
done

・ファイル判定

-d ファイル名  指定したファイルがディレクトリなら真
-f ファイル名  指定したファイルが通常ファイルなら真
-L ファイル名  指定したファイルがシンボリックリンクなら真
-r ファイル名  指定したファイルが読み取り可能なら真
-w ファイル名  指定したファイルが書き込み可能なら真
-x ファイル名  指定したファイルが実行可能なら真
-e ファイル名  指定したファイルが存在すれば真
-s ファイル名  指定したファイルのファイルサイズが0より大きければ真

・文字列判定

-n 文字列  文字列の長さが0より大きければ真
-z 文字列  文字列の長さが0であれば真
文字列1 = 文字列2  2つの文字列が等しければ真
文字列1 != 文字列2  2つの文字列が等しくなければ真

・数値判定

数値1 -eq 数値2  2つの数値が等しければ真
数値1 -ge 数値2  数値1が数値2以上であれば真
数値1 -gt 数値2  数値1が数値2より大きいのであれば真
数値1 -le 数値2  数値1が数値2以下であれば真
数値1 -lt 数値2  数値1が数値2未満であれば真
数値1 -ne 数値2  2つの数値が等しくなければ真

・論理結合

!条件  条件が偽であれば真
条件1 -a 条件2  AND条件
条件1 -o 条件2  OR条件
EOF

echo -e "\033[1;32mALL SUCCESEFUL: ファイルの出力処理が正常に終了しました。\033[0m"
echo -e "\033[1;32m作成されたファイルは $current_dir に格納されています。\033[0m"
